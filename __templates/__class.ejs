/**
 * <%- ramlData.title %> <%- ramlData.version %>
 */
export default class ChatworkApi {

  constructor(private api_token: string) {}

  <% data.forEach(d => { %>

  <%
    let params = [...d.funcParamsWithTypes, d.funcParamWithTypes].join(', ');
    if(!d.params || d.params.length === 0) {
      params += ' = {}';
    }
    const url = CHATWORK_URL + d.uri.replace(/{/g, '\${');
    const method = d.method.toLowerCase();
    const returnValue = d.example ? 'data as ' + d.ifName + 'Response' : 'data';
  %>

  /**
   * <%- d.description %>
   */
  async <%- d.funcName %>(<%- params %>) {
    <% if(method === 'get' || method === 'delete') { %>

    const { data } = await axios.<%- method %>(
      `<%- url %>`,
      { params: <%- d.funcParam %>, headers: { 'X-ChatWorkToken': this.api_token }}
    );

    <% } else if(method === 'post' || method === 'put') { %>

    const params = new URLSearchParams();
    Object.entries(<%- d.funcParam %>).forEach(([key, value]) => params.set(key, value));

    const { data } = await axios.<%- method %>(
      `<%- url %>`,
      params,
      { headers: { 'X-ChatWorkToken': this.api_token }}
    );

    <% } %>

    return <%- returnValue %>;
  }

  <% }); %>
}
